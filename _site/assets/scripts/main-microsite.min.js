'use strict';

/* -------------------------------------------------------
 ------------------- Add Primary Stats -------------------
 -------------------------------------------------------*/

function getPrimaryStats(countryId) {
  var url = 'http://osmstats.redcross.org/countries/' + countryId;
  $.getJSON(url, function (countryData) {
    if (countryData.all_edits !== null) {
      // round value for select stats, then add them to page
      var usersCount = Math.round(countryData.contributors);
      var editsCount = Math.round(countryData.all_edits);
      var buildingCount = Math.round(countryData.building_count_add);
      var roadCount = Math.round(countryData.road_count_add);

      $('#stats-roadCount').html(roadCount.toLocaleString());
      $('#stats-buildingCount').html(buildingCount.toLocaleString());
      $('#stats-usersCount').html(usersCount.toLocaleString());
      $('#stats-editsCount').html(editsCount.toLocaleString());
    } else {
      $('.emphasizedNumber').css('display', 'none');
    }
  });
}

/* -------------------------------------------------------
 --------------- Add HOT Project Carousel ----------------
 -------------------------------------------------------*/

// Fetch Project data from Tasking Manager API
function getProjects(projects) {
  // Add Flexslider to Projects Section
  $('.Projects-slider').flexslider({
    animation: 'slide',
    directionNav: true,
    slideshowSpeed: 6000000,
    prevText: '',
    nextText: '<i class="fa fa-caret-right" aria-hidden="true"></i>'
  });
  $('.flex-next').prependTo('.HOT-Nav-Projects');
  $('.flex-control-nav').prependTo('.HOT-Nav-Projects');
  $('.flex-prev').prependTo('.HOT-Nav-Projects');
  if (projects.length > 0) {
    if (projects.length === 1) {
      $('.flex-next').css('display', 'none');
    }
    projects.forEach(function (project, i) {
      var url = 'http://tasks.hotosm.org/project/' + project + '.json';
      $.getJSON(url, function (projectData) {
        if (projectData.geometry) {
          makeProject(projectData, i + 2);
        }
      }).fail(function (err) {
        console.warn('WARNING >> Project #' + project.id + ' could not be accessed at ' + url + '.\n' + 'The server returned the following message object:', err);
        makePlaceholderProject(project, i + 2);
      });
    });
  } else {
    makeNoTasksPlaceholder();
  }
}

// Update cards with necessary project details
function makeProject(project, projectOrder) {
  var props = project.properties;
  var projDone = Math.round(props.done + props.validated);
  // Updates Progress Bar
  $('#Project-' + project.id + ' .HOT-Progress').addClass('projWidth' + projectOrder);

  // Adds Project variables to the cards
  $('#Project-' + project.id + ' .HOT-Title p').html('<b>' + project.id + ' - ' + props.name + '</b>');
  $('#Project-' + project.id + ' .HOT-Progress').html('<p>' + projDone + '%</p>');
  $('#Project-' + project.id + ' .HOT-Map').attr('id', 'Map-' + project.id);
  $('#Project-' + project.id + ' .HOT-Progress').append('<style>.projWidth' + projectOrder + ':before{ width: ' + projDone + '%;}</style>');

  // Drop a map into the HOT-Map div
  addMap(project.id);
}

// Adds placeholder/ warning formatting to project carousel entry in the event
// that a project cannot be retrieved from the HOT Tasking Manager API
function makePlaceholderProject(projectId, projectOrder) {
  // Adds error title
  $('#Project-' + projectId + ' .HOT-Title p').html('<i class="fa fa-exclamation-triangle" aria-hidden="true"></i>\n<b>HOT Project #' + projectId + ' Not Active/Not Found in HOT Tasking Manager</b>');

  // Hides Tasking Manager Contribute button
  $('#TM-Contribute-Btn-' + projectId).css('display', 'none');
  $('#HOT-Title-' + projectId + ' p').css('width', '100%');

  // Generate issue information for Github tracker
  var ghIssueTitle = 'HOT Tasking Manager endpoint failure in ' + PT.name + ' country page';
  var ghIssueBody = 'Project ' + projectId + ' is no longer indexed in the HOT\n Tasking Manager, so it should be removed from the ' + PT.name + ' partner\n page variable settings.';

  // Add explanatory error text
  var errorHtml = 'Uh oh, it looks like <a href="http://tasks.hotosm.org/project/' + projectId + '"\n target="_blank">Project #' + projectId + '</a> has been removed from the HOT Tasking Manager.\n <a href="https://github.com/MissingMaps/partners/issues/new?title=' + ghIssueTitle + '&body=' + ghIssueBody + '" target="_blank">Click here</a> to report an issue or\n <a href="http://tasks.hotosm.org/" target="_blank">here</a>\n to search for more projects.';

  $('#Project-' + projectId + '_clone .HOT-Description p').html(errorHtml);

  // Remove loading spinners and add placeholder background
  $('#Project-' + projectId + ' .HOT-Map').empty().addClass('placeholder');
  $('#Project-' + projectId + ' .HOT-Progress ').css('display', 'none');
  $('#Project-' + projectId + ' .HOT-Description').css('display', 'none');
}
// Adds placeholder if no projects found in page metadata
function makeNoTasksPlaceholder() {
  var noTasksHTML = ['<li style="list-style: none" id = Project-NONE>', '<div class = "HOT-Container">', '<div class = "HOT-Map placeholder">', '</div>', '<div class = "HOT-Details">', '<div class = "HOT-Title" id = "HOT-Title-NONE">', '<h2><b>There currently are no tasks for this country.</b></h2>', '</div>', '<p><b></b></p><a href="http://tasks.hotosm.org/" class="btn btn-blue" id="TM-Contribute-Btn">FIND OTHER TASKS</a></p>', '</div>', '</div>', '</li>'];
  $('.Projects-Container-Leftside').append(noTasksHTML.join(''));
}

/* -------------------------------------------------------
 ----------- Add Map to HOT Project Carousel -------------
 -------------------------------------------------------*/

function onEachFeature(feature, layer) {
  // Set symbology to match HOTOSM Tasking Manager completion states
  var symbology = {
    color: 'black',
    weight: 0.25,
    opacity: 0.7,
    fillOpacity: 0.4,
    fillColor: 'black'
  };

  var state = feature.properties.state;
  if (state === -1) {
    symbology.fillColor = '#dfdfdf';
  } else if (state === 0) {
    symbology.fillColor = '#dfdfdf';
  } else if (state === 1) {
    symbology.fillColor = '#dfdfdf';
  } else if (state === 2) {
    symbology.fillColor = '#ffa500';
  } else if (state === 3) {
    symbology.fillColor = '#008000';
  }

  layer.setStyle(symbology);
}

function addMap(projectId) {
  // Connect HOT-OSM endpoint for tasking squares data
  var endpoint = 'http://tasks.hotosm.org/project/' + projectId + '/tasks.json';
  $.getJSON(endpoint, function (taskData) {
    // Remove loading spinners before placing map
    $('#Map-' + projectId).empty();

    // Initialize map
    var map = L.map('Map-' + projectId, { zoomControl: false }).setView([38.889931, -77.009003], 13);

    // Add tile layer
    L.tileLayer(mbBasemapUrl + '?access_token=' + mbToken, {
      attribution: '<a href="http://mapbox.com">Mapbox</a>'
    }).addTo(map);

    // Remove 'Leaflet' attribution
    map.attributionControl.setPrefix('');

    // Add feature layer
    var featureLayer = L.geoJson(taskData, {
      onEachFeature: onEachFeature
    }).addTo(map);

    // Fit to feature layer bounds
    map.fitBounds(featureLayer.getBounds());

    // Disable drag and zoom handlers
    map.dragging.disable();
    map.touchZoom.disable();
    map.doubleClickZoom.disable();
    map.scrollWheelZoom.disable();
    map.keyboard.disable();
    if (map.tap) map.tap.disable();
  });
}

/* -------------------------------------------------------
 ----------- Add Functionality to Events List  -----------
 -------------------------------------------------------*/

// Adds hide/ show functionality to events list (pre-generated by Jekyll)
function eventsFunctionality() {
  var eventsCount = $('.event-sub-container').length;
  var firstTwoOpen = false;
  var allOpen = false;

  if (eventsCount <= 3) {
    $('.events-btn').css('display', 'none');
  }

  $('.events-btn').bind('click').click(function (event) {
    if (firstTwoOpen === false && allOpen === false) {
      firstTwoOpen = true;
      $('.hidden').slice(0, 2).css('display', 'block').animate({
        opacity: 1,
        height: '190px'
      }, 500);
      if (eventsCount >= 5) {
        $('.events-btn').html('SEE ALL');
      } else {
        firstTwoOpen = false;
        allOpen = true;
        $('.events-btn').html('SEE FEWER');
      }
    } else if (firstTwoOpen === true && allOpen === false && eventsCount > 2) {
      firstTwoOpen = false;
      allOpen = true;
      $('.events-btn').html('SEE ALL');
      $('.hidden').css('display', 'block').animate({
        opacity: 1,
        height: '190px'
      }, 500);
      $('.events-btn').html('SEE FEWER');
    } else if (firstTwoOpen === false && allOpen === true) {
      firstTwoOpen = false;
      allOpen = false;
      $('.hidden').animate({
        opacity: 0,
        height: '0px'
      }, 300, function () {
        $('.hidden').css('display', 'none');
      });
      $('.events-btn').html('SEE MORE');
    }
  });
}

/* -------------------------------------------------------
 -------------------- Add Events Cards -------------------
 -------------------------------------------------------*/

function generateEvents(calendarId) {
  if (calendarId.match(/google/)) {
    $('#events-spinner').css('display', 'block');
    var url = 'http://osmstats.redcross.org/calendar/' + calendarId + "/events";
    var currentDate = new Date();
    $.getJSON(url, function (eventData) {
      if (eventData.length === 0) {
        $('.events-null').css('display', 'block');
        $('.events-panel').css('display', 'none');
      } else {
        var linkMatch = /(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;
        console.log(eventData);
        Object.keys(eventData).reverse().map(function (key, val) {
          var eventTime = eventData[key].time[0];
          if (moment(currentDate).isBefore(eventTime)) {
            var title = eventData[key].name;
            var singupLink = eventData[key].description.match(linkMatch);
            var desc = eventData[key].description.replace(linkMatch, '');
            var location = eventData[key].location;
            var date = moment(eventData[key].time[0]).format("MMMM Do");
            var time = eventData[key].time.map(function (d) {
              var date = new Date(d);
              return moment(date).format('h:mma');
            }).join(' - ');
            var eventTopSection = ['<div class="card-divider event-top-section">', '<div class="sub-head">', '<img class="event-images" src="/assets/graphics/flags/4x3/' + PT.flag + '" width="24"/>', '<h3 class="event-header">' + title + '</h3>', '<a class="btn btn-grn" href=' + singupLink + ' target="">SIGN UP</a>', '</div>', '</div>'].join('');
            var eventMainDetails = ['<div class="textbox" style="padding-top:8px">', '<p>' + '<b>Date:</b> ' + date + '</p>', '<p>' + '<b>Time:</b> ' + time + '</p>', '<p>' + '<b>Location:</b> ' + location + '</p>', '<p>' + '<b>About:</b> ' + desc + '</p>', '</div>'].join('');
            var eventsHTML = ['<div class="column">', '<div class="card">', eventTopSection, '<div class="card-section">', eventMainDetails, '</div>', '</div>', '</div>'].join('');
            $('#event-cards').append(eventsHTML);
            $('#events-spinner').css('display', 'none');
          }
        });
      }
    });
  } else {
    $('.events-null').css('display', 'block');
    $('.events-panel').css('display', 'none');
  }
  eventsFunctionality();
}

/* -------------------------------------------------------
 ------------------ Add Activity Graphs ------------------
 -------------------------------------------------------*/

function setupGraphs() {
  function removeExistingGraphs() {
    var totalGraph = document.querySelector('#Team-User-Total-Graph svg');
    var bldngGraph = document.querySelector('#Team-User-Bldng-Graph svg');
    var roadsGraph = document.querySelector('#Team-User-Roads-Graph svg');
    totalGraph.parentNode.removeChild(totalGraph);
    bldngGraph.parentNode.removeChild(bldngGraph);
    roadsGraph.parentNode.removeChild(roadsGraph);
  }
  var moreBtn = $('.btn.invert-btn-grn.teams-btn');
  var teamLabel = $('.Team-Graph-Title .left');
  var teamUserLabel = $('.Team-User-Graph-Title .left');

  // Sets Users button to Selected, loads Users graphs, hides
  // "Show More Teams" button
  $('#Select-Users-Graph').click(function () {
    $('#Select-Teams-Graph').removeClass('Selected');
    $('#Select-Users-Graph').addClass('Selected');
    teamLabel.text('Users');
    teamUserLabel.text('Users');
    // Remove existing graphs
    removeExistingGraphs();
    // Gets main hashtag on each partner page via team.html
    getUserActivityStats(PT.code);
  });

  // Sets Teams button to Selected, loads Teams graphs, reveals
  // "Show More Teams" button if applicable
  $('#Select-Teams-Graph').click(function () {
    $('#Select-Users-Graph').removeClass('Selected');
    $('#Select-Teams-Graph').addClass('Selected');
    teamLabel.text('Teams');
    teamUserLabel.text('Teams');
    // if (PT.subHashtags.length > 10) {
    //   moreBtn.css('display', 'inline').animate({opacity: 1}, 500);
    // }
    // Remove existing graphs
    removeExistingGraphs();
    // Gets hashtag array on each partner page via team.html
    getGroupActivityStats(PT.code);

    showMoreContributions();
  });
}

// Returns svg link to Missing Maps user endpoint
function generateUserUrl(userName) {
  var userUrl = 'http://www.missingmaps.org/users/#/' + userName.replace(/\s+/g, '-').toLowerCase();
  return '<a xlink:href="' + userUrl + '" target="_blank" style="text-decoration:none">' + userName + '</a>';
}

function getUserActivityStats(countryId) {

  var url = 'http://osmstats.redcross.org/countries/' + countryId + '/users';
  $.getJSON(url, function (userData) {
    if (userData.length !== 0) {
      var totalSum = Object.keys(userData).map(function (user) {
        var totalEdits = Math.round(Number(userData[user].all_edits));
        return { name: generateUserUrl(userData[user].name), value: totalEdits };
      }).sort(function (a, b) {
        return b.value - a.value;
      });

      // For each user, sum the total building edits
      var bldngSum = Object.keys(userData).map(function (user) {
        var bldngEdits = Math.round(Number(userData[user].building_count_add));
        return { name: generateUserUrl(userData[user].name), value: bldngEdits };
      }).sort(function (a, b) {
        return b.value - a.value;
      });

      // For each user, sum the total road kilometers edited
      var roadsSum = Object.keys(userData).map(function (user) {
        var roadsEdits = Math.round(Number(userData[user].road_km_add));
        return { name: generateUserUrl(userData[user].name), value: roadsEdits };
      }).sort(function (a, b) {
        return b.value - a.value;
      });

      // Spawn a chart function with listening events for each of the metrics
      var c1 = new Barchart(totalSum, '#Team-User-Total-Graph');
      var c2 = new Barchart(bldngSum, '#Team-User-Bldng-Graph');
      var c3 = new Barchart(roadsSum, '#Team-User-Roads-Graph');

      var moreBtn = $('.btn.invert-btn-grn.teams-btn');
      if (totalSum.length > 10) {
        moreBtn.css('display', 'inline').animate({ opacity: 1 }, 500);
      } else {
        moreBtn.css('display', 'inline').animate({ opacity: 0 }, 500);
      }

      // On window resize, run window resize function on each chart
      d3.select(window).on('resize', function () {
        c1.resize();
        c2.resize();
        c3.resize();
      });
    }
  });
}

// Returns svg link to Missing Maps leaderboard endpoint
function generateHashtagUrl(hashtag) {
  var hashtagUrl = 'http://www.missingmaps.org/leaderboards/#/' + hashtag;
  return '<a xlink:href="' + hashtagUrl + '" target="_blank" style="text-decoration: none">#' + hashtag + '</a>';
}

// populate 'teams' graphs, which show activity per hashtag
function getGroupActivityStats(countryId) {

  var url = 'http://osmstats.redcross.org/countries/' + countryId + '/hashtags';
  $.getJSON(url, function (hashtagData) {
    /*
      For each hashtag, generate obj with link to hashtag's mm-leaderboards
      page and the statistic of interest
      ---
      this is done in a reduce function w/the following steps
      1) check to see if object has contents
      2) get the statistic of interest, 'sum', rounded & as a Number
      3) add to an acc list a) a link to hashtag on leaderboards and b) sum
      4) sort the hashtags from largest to smallest 'sum' value
    */
    if (hashtagData.length !== 0) {
      var totalSum = hashtagData.reduce(function (acc, ht) {
        if (!$.isEmptyObject(ht)) {
          var sum = Math.round(Number(ht.all_edits));
          acc.push({ name: generateHashtagUrl(ht.hashtag), value: sum });
        }
        return acc;
      }, []).sort(function (a, b) {
        return b.value - a.value;
      });

      var bldngSum = hashtagData.reduce(function (acc, ht) {
        if (!$.isEmptyObject(ht)) {
          var sum = Math.round(Number(ht.building_count_add)) + Math.round(Number(ht.building_count_mod));
          acc.push({ name: generateHashtagUrl(ht.hashtag), value: sum });
        }
        return acc;
      }, []).sort(function (a, b) {
        return b.value - a.value;
      });

      var roadsSum = hashtagData.reduce(function (acc, ht) {
        if (!$.isEmptyObject(ht)) {
          var sum = Math.round(Number(ht.road_km_add)) + Math.round(Number(ht.road_km_add));
          acc.push({ name: generateHashtagUrl(ht.hashtag), value: sum });
        }
        return acc;
      }, []).sort(function (a, b) {
        return b.value - a.value;
      });

      // Spawn a chart function with listening events for each of the metrics
      var c1 = new Barchart(totalSum, '#Team-User-Total-Graph');
      var c2 = new Barchart(bldngSum, '#Team-User-Bldng-Graph');
      var c3 = new Barchart(roadsSum, '#Team-User-Roads-Graph');

      var moreBtn = $('.btn.invert-btn-grn.teams-btn');
      if (totalSum.length > 10) {
        moreBtn.css('display', 'inline').animate({ opacity: 1 }, 500);
      } else {
        moreBtn.css('display', 'inline').animate({ opacity: 0 }, 500);
      }
      // On window resize, run window resize function on each chart
      d3.select(window).on('resize', function () {
        c1.resize();
        c2.resize();
        c3.resize();
      });
    } else {
      $('.Team-User-Nav').css('display', 'none');
      $('.Team-User-Stats').css('display', 'none');
      $('.teams-more').css('display', 'none');
      $('.teams-none').css('display', 'block');
      $('.Team-User-Container h1').css('text-align', 'center');
    }
  });
}

function Barchart(data, targetElement) {
  // Setting margins and size using Bostock conventions for future
  // ease of use, although currently leaving margins at 0
  var margin = { top: 0, right: 0, bottom: 0, left: 0 };
  var width = parseInt(d3.select(targetElement).style('width'), 10);
  width = width - margin.left - margin.right;
  var height = 220;
  var barPadding = 60 / data.length;
  var barHeight = (height - margin.top - margin.bottom) / data.length - barPadding;

  // If more than 10 records...
  if (data.length > 10) {
    // ...freeze dynamic sizing of bars and begin expanding the svg height instead
    barPadding = 60 / 10;
    barHeight = (height - margin.top - margin.bottom) / 10 - barPadding;
    height = height + (barPadding + barHeight) * (data.length - 10);
    // ...enable "Show More" functionality; button appears which allows
    // for panning up and down the length of svg bar graph
    var offset = -((data.length - 10) * (barPadding + barHeight)) - 12;
    var expanded = false;
    $('.teams-btn').css('display', 'initial').click(function () {
      var graphs = $('.Team-User-Graph > svg');
      if (expanded === false) {
        $('.teams-btn').html('SHOW INITIAL TEAMS');
        graphs.animate({ marginTop: offset }, 300);
        expanded = true;
      } else if (expanded === true) {
        $('.teams-btn').html('SHOW MORE TEAMS');
        graphs.animate({ marginTop: 0 }, 300);
        expanded = false;
      }
    });
  }

  // Define scales
  var x = d3.scale.linear().range([0, width]).domain([0, d3.max(data, function (d) {
    return d.value;
  })]);

  // Create the chart
  var chart = d3.select(targetElement).append('svg').style('width', width + margin.left + margin.right + 'px').style('height', height + 'px').append('g').attr('transform', 'translate(' + [margin.left, margin.top] + ')');

  d3.select(chart.node().parentNode).style('height', height + 'px');

  // Render the chart, add the set the bar groups
  var bars = chart.selectAll('.bar').data(data).enter().append('g').attr('class', 'bar').attr('transform', function (d, i) {
    return 'translate(0,' + i * (barHeight + barPadding) + ')';
  });

  // Add the bar rectangles
  bars.append('rect').attr('class', 'bars').attr('height', barHeight).attr('width', function (d) {
    return x(d.value);
  });

  // Add the name labels
  bars.append('text').attr('class', 'Graph-Label-Name').attr('x', 5).attr('y', barHeight / 2).attr('dy', '.35em').html(function (d) {
    return d.name;
  }).style('fill', '#606161');

  // Add the value labels
  bars.append('text').attr('class', 'Graph-Label-Value').attr('x', width - 20).attr('y', barHeight / 2).attr('dy', '.35em').text(function (d) {
    return d.value.toLocaleString();
  }).attr('text-anchor', 'end').style('fill', '#606161');

  this.resize = function () {
    // Recalculate width of chart
    width = parseInt(d3.select(targetElement).style('width'), 10);
    width = width - margin.left - margin.right;

    // Update svg size
    d3.select(targetElement).select('svg').style('width', width + margin.left + margin.right + 'px');

    // Update the scale of chart
    x.range([0, width]);

    // Update the bar width
    chart.selectAll('rect.bars').attr('width', function (d) {
      return x(d.value);
    });

    // Update the value text position
    chart.selectAll('text.Graph-Label-Value').attr('x', width - 20);
  };
}

function showUpdatesPlaceholder() {
  if ($(".Updates-Content").length === 0) {
    $(".updates-null").css('display', 'block');
    $("#updates-h1").css('text-align', 'center');
  }
}

/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 ---------------------------------------------------------
 --------------------- Setup Project ---------------------
 -------------------------------------------------------*/
// Global Mapbox variables
var mbToken = 'pk.eyJ1IjoiZGV2c2VlZCIsImEiOiJnUi1mbkVvIn0.018aLhX0Mb0tdtaT2QNe2Q';
var mbBasemapUrl = 'https://api.mapbox.com/v4/mapbox.light/{z}/{x}/{y}.png';

if (PT.name !== 'Microsites') {
  showUpdatesPlaceholder();
  // Populate the primary stats in hero via Missing Maps API
  getPrimaryStats(PT.code);
  // Populate initial groups graph via Missing Maps API
  getGroupActivityStats(PT.code);
  // Populate project carousel via HOTOSM Tasking Manager API
  getProjects(PT.hotProjects);
  // Populate events section with upcoming events
  generateEvents(PT.calendar);
  // setupGraphs
  setupGraphs();
}
//# sourceMappingURL=maps/main-dde05f754d.js.map